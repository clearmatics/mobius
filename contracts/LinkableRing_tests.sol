// Copyright (c) 2016-2017 Clearmatics Technologies Ltd

// SPDX-License-Identifier: LGPL-3.0+

pragma solidity ^0.4.18;

import './LinkableRing.sol';


contract LinkableRing_tests
{
	using LinkableRing for LinkableRing.Data;

	LinkableRing.Data internal m_ring;

	function LinkableRing_tests()
        public
    {
        // Nothing ...
    }

	function testInit ()
		public returns (bool)
	{
		delete m_ring;

		require( ! m_ring.IsInitialized() );
		require( m_ring.IsDead() );

		_initTestRing();

		require( ! m_ring.IsFull() );

		require( ! m_ring.IsDead() );
		
		return true;
	}

	function _initTestRing ()
		internal
	{
		delete m_ring;

		var guid = sha256("1");
		var ok = m_ring.Initialize(guid);
		require( ok == true );
		require( m_ring.IsInitialized() );
		require( ! m_ring.IsFull() );
	}

	function _fillTestRing ()
		internal
	{
		var ok = m_ring.AddParticipant( 15201544523224716611047554162655318369326098920760992806294282873621188361302, 8049887880302834643867918893986801628784209472486881120173132635179564996750 );
		require( ok == true );
		require( ! m_ring.IsFull() );
		
		ok = m_ring.AddParticipant(2864146953215387991650307853187221646929890249230753473970630963555211270830, 19974888627227247767725306386952207830369770978312010830473870330715216459888 );
		require( ok == true );
		
		ok = m_ring.AddParticipant(11802586219790549114106218615216140214135730687869911031682317746534851646642, 18469118937248172961432772506316070842797392576874035050327233601294937134214);
		require( ok == true );
		
		ok = m_ring.AddParticipant(14750767202794174494069895486860808993207681341774320026808054547344054421581, 12924920412071921826297345645283965810489658634968309881653899964121243502566 );
		require( ok == true );
	}

	function testParticipate ()
		public returns (bool)
	{
		_initTestRing();
		_fillTestRing();

		var ok = m_ring.PubExists(15201544523224716611047554162655318369326098920760992806294282873621188361302);
		require( ok == true );
		require( m_ring.IsFull() );		

		require( m_ring.Message() == 0x291a6780850827fcd8621d0e5471343831109bc14142ec101527b048bb3d1794 );

		return true;
	}

	function testVerify ()
		public returns (bool)
	{
		_initTestRing();

		_fillTestRing();

        uint256[] memory ctlist = new uint256[](8);
        ctlist[0] = 20853301309224204140850907483145190973044613001758378871848115918385899219387;
        ctlist[1] = 9317131247297195885946346699744650907176126179419614612840844384077063186425;
        ctlist[2] = 20898468494972458585245059452949535846887121970230559918336684328791066147747;
        ctlist[3] = 2986143557871053785334761070644999793151956676132652606589985706762137398754;
        ctlist[4] = 10455017181508360833815002569095435558520129924248346429838424769628897243093;
        ctlist[5] = 7706146382413050422535575572291511409490627421923647014400327046464988688885;
        ctlist[6] = 446022580115833093457380747787879591969245085567346575340759689027920458706;
        ctlist[7] = 16400172916399253914651469367823034567665816937929536474245909361083746809541;
        
        var ok = m_ring.SignatureValid(13495246100508828436129396215696389042103917384015723197132056291949822869447, 17179563752757494496597752941318743229705747077314286085295431297834666711491, ctlist);
        require( ok );

		return ok;
	}
}
